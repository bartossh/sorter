name: Release

on:
    push:
        tags:
            - "v*.*.*"

env:
    CARGO_TERM_COLOR: always

jobs:
    create-release:
        name: Create Release
        runs-on: ubuntu-latest
        outputs:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
        steps:
            - name: Create Release
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ github.ref }}
                  release_name: Release ${{ github.ref }}
                  draft: false
                  prerelease: false

    build-and-upload:
        name: Build and Upload Release Assets
        needs: create-release
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                include:
                    - os: ubuntu-latest
                      target: x86_64-unknown-linux-gnu
                      artifact_name: sort_bigger_then_ram
                      asset_name: sort_bigger_then_ram-linux-amd64
                    - os: ubuntu-latest
                      target: aarch64-unknown-linux-gnu
                      artifact_name: sort_bigger_then_ram
                      asset_name: sort_bigger_then_ram-linux-arm64
                    - os: windows-latest
                      target: x86_64-pc-windows-msvc
                      artifact_name: sort_bigger_then_ram.exe
                      asset_name: sort_bigger_then_ram-windows-amd64.exe
                    - os: macos-latest
                      target: x86_64-apple-darwin
                      artifact_name: sort_bigger_then_ram
                      asset_name: sort_bigger_then_ram-macos-amd64
                    - os: macos-latest
                      target: aarch64-apple-darwin
                      artifact_name: sort_bigger_then_ram
                      asset_name: sort_bigger_then_ram-macos-arm64
        steps:
            - name: Checkout sources
              uses: actions/checkout@v4

            - name: Install stable toolchain
              uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.target }}

            - name: Install cross-compilation tools
              if: matrix.target == 'aarch64-unknown-linux-gnu'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y gcc-aarch64-linux-gnu

            - name: Build release binary
              uses: actions-rs/cargo@v1
              with:
                  use-cross: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}
                  command: build
                  args: --release --target ${{ matrix.target }}

            - name: Strip binary (Linux and macOS)
              if: matrix.os != 'windows-latest'
              run: |
                  strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

            - name: Create archive
              if: matrix.os != 'windows-latest'
              run: |
                  cd target/${{ matrix.target }}/release
                  tar czf ../../../${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
                  cd -

            - name: Create archive (Windows)
              if: matrix.os == 'windows-latest'
              shell: powershell
              run: |
                  Compress-Archive -Path target\${{ matrix.target }}\release\${{ matrix.artifact_name }} -DestinationPath ${{ matrix.asset_name }}.zip

            - name: Upload Release Asset (Unix)
              if: matrix.os != 'windows-latest'
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ needs.create-release.outputs.upload_url }}
                  asset_path: ./${{ matrix.asset_name }}.tar.gz
                  asset_name: ${{ matrix.asset_name }}.tar.gz
                  asset_content_type: application/gzip

            - name: Upload Release Asset (Windows)
              if: matrix.os == 'windows-latest'
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ needs.create-release.outputs.upload_url }}
                  asset_path: ./${{ matrix.asset_name }}.zip
                  asset_name: ${{ matrix.asset_name }}.zip
                  asset_content_type: application/zip
